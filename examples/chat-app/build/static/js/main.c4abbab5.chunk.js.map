{"version":3,"sources":["components/MessageForm.jsx","components/MyMessage.jsx","components/TheirMessage.jsx","components/ChatFeed.jsx","App.js","appConstants.js","index.js"],"names":["MessageForm","props","useState","value","setValue","chatId","creds","handleSubmit","event","preventDefault","text","trim","length","sendMessage","className","onSubmit","placeholder","onChange","target","isTyping","htmlFor","PictureOutlined","type","multiple","id","style","display","files","SendOutlined","MyMessage","message","attachments","src","file","alt","float","marginRight","color","backgroundColor","TheirMessage","lastMessage","isFirstMessageByUser","sender","username","backgroundImage","avatar","marginleft","ChatFeed","chats","activeChat","userName","messages","chat","renderReadReceipts","isMyMessage","people","map","person","index","last_read","console","log","title","Object","keys","key","lastMessageKey","width","marginLeft","height","App","projectID","userSecret","renderChatFeed","chatAppProps","appConstants","modes","mfe","standalone","fancyConsoleLog","input","performance","now","mfeRoot","document","getElementById","fallbackRoot","runningMode","renderTarget","renderFn","ReactDOM","render","StrictMode","window","renderTestMfe"],"mappings":"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","file":"static/js/main.c4abbab5.chunk.js","sourcesContent":["import {useState} from 'react'\nimport {sendMessage, isTyping} from 'react-chat-engine'\n\nimport {sendOutlined, PictureOutlined, SendOutlined} from '@ant-design/icons'\n\n\nconst MessageForm = (props) => {\n    // using state variables\n    const [value, setValue] = useState('')\n    const {chatId, creds} = props; \n\n    function handleSubmit(event) {\n        // prevent browser reset \n        event.preventDefault()\n\n        const text = value.trim()\n\n        if(text.length > 0) {\n            // function from react chat engine\n            sendMessage(creds, chatId, {text})\n\n            setValue('')\n        }\n    }\n\n    function handleChange(event) {\n        setValue(event.target.value)\n\n        // react chat engine feature\n        isTyping(props, chatId)\n    }\n\n    // sending an image\n    function handleUpload(event) {\n        sendMessage(creds, chatId, {files: event.target.files, text: ''})\n    }\n\n    return (\n        <form className=\"message-form\" onSubmit={handleSubmit}>\n            <input \n                className=\"message-input\"\n                placeholder=\"Send a message\"\n                value={value}\n                onChange={handleChange}\n                onSubmit={handleSubmit}\n            />\n\n            <label htmlFor=\"upload-button\">\n                <span className=\"image-button\">\n                    <PictureOutlined className=\"picture-icon\"/>\n                </span>\n            </label>\n\n            {/* sending an image */}\n            <input \n                type=\"file\"\n                multiple={false}\n                id=\"upload-button\"\n                style={{display: 'none'}}\n                onChange={handleUpload}\n            >\n            </input>\n\n            <button type=\"submit\" className=\"send-button\">\n                <SendOutlined className=\"send-icon\" />\n            </button>\n        </form>\n    )\n}\n\nexport default MessageForm\n","\n\nconst MyMessage = ({message}) => {\n    if(message ?. attachments ?.length > 0) {\n        return (\n            <img src={message.attachments[0].file} alt=\"message-attachment\" className=\"message-image\" style={{float: 'right'}}>\n            </img>\n        )\n    }\n\n    return (\n        <div className=\"message\" style={{float: 'right', marginRight: '18px', color: 'white', backgroundColor: '#3B2A50'}}>\n            {message.text}\n        </div>\n    )\n}\n\nexport default MyMessage\n","\n\nconst TheirMessage = ({lastMessage, message}) => {\n    const isFirstMessageByUser = !lastMessage || lastMessage.sender.username != message.sender.username;\n\n    return (\n        <div className=\"message-row\">\n            {isFirstMessageByUser && (\n                <div \n                    className=\"message-avatar\"\n                    style={{backgroundImage: `url(${message ?. sender ?. avatar})`}}\n                />\n            )}\n\n            {\n                message ?. attachments ?. length > 0\n                ? (\n                    <img \n                        src={message.attachments[0].file}\n                        alt=\"message-attachment\"\n                        className=\"message-image\"\n                        style={{marginleft: isFirstMessageByUser ? '4px' : '48px'}}\n                    ></img>\n                )\n                : (\n                    <div className=\"message\" style={{float: 'left', marginRight: '18px', backgroundColor: \"#CABCDC\", marginleft: isFirstMessageByUser ? '4px' : '48px'}}>\n                        {message.text}\n                    </div>\n                )\n            }\n        </div>\n    )\n}\n\nexport default TheirMessage\n","import MessageForm from './MessageForm'\nimport MyMessage from './MyMessage'\nimport TheirMessage from './TheirMessage'\n\nconst ChatFeed = (props) => {\n\n    // destructuring from props\n    const {chats, activeChat, userName, messages} = props;\n\n    const chat = chats && chats[activeChat];\n\n    console.log(chat, userName, messages)\n\n    function renderReadReceipts(message, isMyMessage) {\n        // verifying if the person read the message\n        return chat.people.map((person, index) => person.last_read === message.id && (\n            <div \n                key={`read_${index}`}\n                className=\"read-receipt\"\n                style={{\n                    float: isMyMessage ? 'right' : 'left',\n                    backgroundImage: `url(${person ?. person ?. avatar})`\n                }}\n            >\n            </div>\n        ))\n    }\n\n    function renderMessages() {\n        const keys = Object.keys(messages)\n\n        return keys.map((key, index) => {\n            const message = messages[key];\n\n            const lastMessageKey = index === 0 ? null : key[index - 1] \n            const isMyMessage = userName === message.sender.username\n\n            return (\n                <div key={`msg_${index}`} style={{width: '100%'}}>\n                    <div className=\"message-block\">\n                        {\n                            isMyMessage \n                            ? <MyMessage message={message} /> \n                            : <TheirMessage message={message} lastMessage={messages[lastMessageKey]}/> \n                        }\n                    </div>\n\n                    <div className=\"read-receipts\" style={{ marginRight: isMyMessage ? '18px' : '0px', marginLeft: isMyMessage ? '0px' : '68px'}}>\n                        {renderReadReceipts(message, isMyMessage)}\n                    </div>\n                </div>\n            )\n        })\n    }\n\n    if(!chat) {return 'Loading...'}\n\n    return (\n        <div className=\"chat-feed\">\n            <div className=\"chat-title-container\">\n                <div className=\"chat-title\">\n                    {chat ?.title}\n                </div>\n                <div className=\"chat-subttitle\">\n                    {chat.people.map((person) => ` ${person.person.username}`)}\n                </div>\n            </div>\n\n\n            {renderMessages()}\n\n            <div style={{height: '100px'}}>\n            </div>\n            <div className=\"message-form-container\">\n                {/* spreading props into object form, then makes a copy */}\n                <MessageForm {...props} chatId={activeChat}/>\n            </div>\n        </div>\n    )\n}\n\nexport default ChatFeed\n","import { ChatEngine } from \"react-chat-engine\"\nimport ChatFeed from './components/ChatFeed'\nimport \"./App.css\"\n\n\nfunction App() {\n\treturn <ChatEngine height='100vh' projectID='b2b42d80-4e19-49bd-ad10-20b4fdee9ab0' userName='default_user' userSecret='123123' \n    renderChatFeed={(chatAppProps) => <ChatFeed {... chatAppProps} />}\n  />\n}\n\nexport default App\n","const appConstants = {\n    modes: {\n        mfe: \"MFE\",\n        standalone: \"STANDALONE\",\n    },\n};\n\nexport default appConstants;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport appConstants from './appConstants'\n\n\n\nconst fancyConsoleLog = (input) => {\n  console.log(\n    `%c🐃 [${performance.now()} ms]\\n\\n${input}`,\n    \"color: #fefefe; background-color: #34f; font-size: 24px;\"\n  );\n};\n\n// this is a little more complex in the real world, but this is the idea...\nconst mfeRoot = document.getElementById(\"chat-app\");\n\n// if we can't find the mfeRoot above, we must be running in standalone mode\nconst fallbackRoot = document.getElementById(\"root\");\n\nconst runningMode = mfeRoot\n  ? appConstants.modes.mfe\n  : appConstants.modes.standalone;\n\n// only attempt to render in the mfeRoot if it actually exists!\nconst renderTarget = mfeRoot || fallbackRoot;\nfancyConsoleLog(\n  `setting final render target, it looks like we're running in ${runningMode} mode`\n);\n\n// wrap the render function in *another* function so that we can control when it's called\nconst renderFn = () =>\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    // use the renderTarget that actually exists, whichever it is\n    renderTarget\n  );\n\n// make the renderTestMfe function available globally on the window object -- this is important!\nfancyConsoleLog(\n  \"setting window.renderTestMfe equal to the React render function\"\n);\n\nif (runningMode === appConstants.modes.standalone) {\n  // we only need to actually call the renderFn ourselves if we're running in standalone mode\n  // if we're running in MFE mode, the container will call this function for us!\n  renderFn();\n} else {\n  fancyConsoleLog(\n    `We're running in ${runningMode} mode, so there's no need to call renderFn() here!`\n  );\n\n  // in fact, we don't need to expose this renderFn function to the global window object unless we're running in MFE mode\n  window.renderTestMfe = renderFn;\n}\n"],"sourceRoot":""}